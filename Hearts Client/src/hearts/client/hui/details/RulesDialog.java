/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RulesDialog.java
 *
 * Created on 2010-06-26, 15:05:28
 */

package hearts.client.hui.details;

/**
 *
 * @author Łukasz
 */
public class RulesDialog extends javax.swing.JDialog {

    /** Creates new form RulesDialog */
    public RulesDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setTitle("Zasady gry");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(500, 400));

        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("W grze bierze udział pełna talia kart (52 karty). \nStarszeństwo kart od asa do dwójki. Jedną kolejkę w której każdy gracz(wg wskaz. zegara) kładzie jedną kartę nazywamy lewą. Pierwszą lewę rozpoczyna gracz  na lewo od rozdającego, każdą następną - gracz który zabrał poprzednią lewę. Gracze rozdają kolejno wg ruchu wskazówek zegara. Kolorem wistującym jest kolor karty wyrzuconej jako pierwsza w lewie.\n\nślizg - jeżeli w rozdaniu któryś z graczy nie weźmie ani jednej lewy\nmax – w rozdaniu jeden gracz bierze wszystkie lewy\n\nGra składa się z 3 części:\n- zbój (punktowanie ujemne – 4 rozdania) – należy nie brać lewych\n- odgrywka (punktowanie dodatnie – 4 rozdania) – należy brać lewe\n- rozbójnik (dodatkowe rozdania za ślizgi i maxy – rozgrywka w bez atu)\n\nW pierwszej lewie nie wolno odrzucić króla kier, a kiery są kolorem granym wówczas gdy wistujący nie ma w ręce innego koloru. Można kiery też wyrzucać wtedy gdy nie posiadamy koloru wistowanego. \n\nNie mając do koloru odrzucamy dowolną kartę.\n\nPrzyznawanie dodatkowych rozdań w bez atu (rozbójnik) w zbóju lub odgrywce:\n- za każde x2 – 1 rozdanie\n- za każde x3 – 2 rozdania\n- za maxa – 3 rozdania");
        jTextArea1.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextArea1);

        jTabbedPane1.addTab("Zasady ogólne", jScrollPane1);

        jTextArea2.setColumns(20);
        jTextArea2.setEditable(false);
        jTextArea2.setRows(5);
        jTextArea2.setText("lewa: 2 pkt \nkier: 2 pkt \ndama: 5 pkt \npan(król, walet): 3 pkt \nkról kier: 16 pkt (w sumie jako król kier, pan i kier – 21 pkt) \ndwie ostatnie lewy: 2x9 pkt \nRazem: 130 pkt\n\nW zbóju – za wszystko co weźmiemy punkty ujemne:\n- jeden gracz 0pkt – pozostali pkt ujemne x2\n- dwóch graczy 0pkt – pozostali pkt ujemne x3\n- jeden gracz bierze wszystko – on 0 pkt pozostali -130pkt\n\nW odgrywce – punkty dodatnie za każdą lewą +10pkt\n- jeden gracz 0pkt – x2\n- dwóch graczy 0pkt – x3\n- trzech graczy 0pkt – x4\n");
        jScrollPane2.setViewportView(jTextArea2);

        jTabbedPane1.addTab("Zasady punktowania", jScrollPane2);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jTextArea3.setColumns(20);
        jTextArea3.setEditable(false);
        jTextArea3.setLineWrap(true);
        jTextArea3.setRows(5);
        jTextArea3.setText("Dodatkowo w odgrywce i rozbójniku w każdym rozdaniu przed pierwszą lewą ma miejsce licytacja prawa do wistowania i wyboru atu (tylko odgrywka, bo rozbójnik w bez atu) w zamian za lewy zdobyte przez danego użytkownika (po zakończeniu rozdania od stanu punktów zwycięzcy licytacji odejmowane jest 10pkt * wylicytowana ilość lew).\n\n\nPrzebieg licytacji:\n- posiadający prawo wistowania decyduje czy chce oddać to prawo na licytacje,\n- pozostali użytkownicy decydują czy chcą wziąć udział w licytacji i deklarują ilość lew, które chcą zapłacić,\n- licytację (o ile miała miejsce) wygrywa gracz, który zadeklarował największą ilość lew.");
        jTextArea3.setWrapStyleWord(true);
        jScrollPane3.setViewportView(jTextArea3);

        jPanel1.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Licytacja", jPanel1);

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                RulesDialog dialog = new RulesDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    // End of variables declaration//GEN-END:variables

}
