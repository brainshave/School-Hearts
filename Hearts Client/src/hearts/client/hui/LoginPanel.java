/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * loginPanel.java
 *
 * Created on 2010-05-02, 17:06:51
 */
package hearts.client.hui;

import hearts.defs.state.ILoginPanel;
import hearts.client.NetClient;
import hearts.defs.state.IGUIState;
import hearts.maintenance.LoginMaintenance;
import java.awt.Component;
import java.io.IOException;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import javax.swing.JOptionPane;

/**
 *
 * @author szymon
 */
public class LoginPanel extends javax.swing.JPanel implements ILoginPanel {

    static Preferences prefs = Preferences.userNodeForPackage(LoginPanel.class).node("loginData");
    static final String SERVER_PREFS_KEY = "server";
    static final String PORT_PREFS_KEY = "port";
    static final String LOGIN_PREFS_KEY = "login";
    static final String PASSWORD_PREFS_KEY = "password";
    static final String SAVE_PASSWORD_PREFS_KEY = "savePassword";
    IGUIState gui = null;

    /** Creates new form loginPanel */
    public LoginPanel() {
        initComponents();
        loadPrefs();
    }

    @Override
    public void setEnabled(boolean enabled) {
        super.setEnabled(enabled);
        for(Component c :this.getComponents()) {
            if(c != loginButton) {
                c.setEnabled(enabled);
            }
        }
        loginButton.setText(enabled ? "Zaloguj" : "Anuluj łączenie");
    }



    protected void loadPrefs() {

        serverField.setText(prefs.get(SERVER_PREFS_KEY, "localhost"));
        portSpinner.setValue(prefs.getInt(PORT_PREFS_KEY, 9999));

        loginField.setText(prefs.get(LOGIN_PREFS_KEY, ""));
        boolean savePassword = prefs.getBoolean(SAVE_PASSWORD_PREFS_KEY, false);
        savePasswordCheck.setSelected(savePassword);
        if(savePassword) {
            passwordField.setText(prefs.get(PASSWORD_PREFS_KEY, ""));
        } else {
            prefs.putBoolean(PASSWORD_PREFS_KEY, false);
        }
    }

    protected void savePrefs() {
        prefs.put(SERVER_PREFS_KEY, serverField.getText());
        prefs.putInt(PORT_PREFS_KEY, (Integer) portSpinner.getValue());

        prefs.put(LOGIN_PREFS_KEY, loginField.getText());
        boolean savePassword = savePasswordCheck.isSelected();
        prefs.putBoolean(SAVE_PASSWORD_PREFS_KEY, savePassword);
        if (savePassword) {
            prefs.put(PASSWORD_PREFS_KEY, new String(passwordField.getPassword()));
        } else {
            prefs.put(PASSWORD_PREFS_KEY, "");
        }

        try {
            prefs.flush();
        } catch (BackingStoreException ex) {
            Logger.getLogger(LoginPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        serverField = new javax.swing.JTextField();
        serverLabel = new javax.swing.JLabel();
        loginField = new javax.swing.JTextField();
        portSpinner = new javax.swing.JSpinner();
        loginLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        portLabel = new javax.swing.JLabel();
        savePasswordCheck = new javax.swing.JCheckBox();
        passwordField = new javax.swing.JPasswordField();
        loginButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();

        setLayout(new java.awt.GridBagLayout());

        serverField.setText("localhost");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        add(serverField, gridBagConstraints);

        serverLabel.setText("Serwer:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 8);
        add(serverLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        add(loginField, gridBagConstraints);

        portSpinner.setModel(new javax.swing.SpinnerNumberModel(9999, 1, 65535, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        add(portSpinner, gridBagConstraints);

        loginLabel.setText("Login:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 8);
        add(loginLabel, gridBagConstraints);

        passwordLabel.setText("Hasło:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 8);
        add(passwordLabel, gridBagConstraints);

        portLabel.setText("Port:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 8);
        add(portLabel, gridBagConstraints);

        savePasswordCheck.setText("Zapisz hasło");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(savePasswordCheck, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        add(passwordField, gridBagConstraints);

        loginButton.setText("Zaloguj");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(loginButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jSeparator1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jSeparator2, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        savePrefs();
        setEnabled(false);
        try {
            gui.setSocket(new NetClient(serverField.getText(), (Integer) portSpinner.getValue()));
            gui.getSocket().maintenanceReceived(
                    new LoginMaintenance(
                    loginField.getText(),
                    new String(passwordField.getPassword())));

        } catch (UnknownHostException ex) {
            Logger.getLogger(LoginPanel.class.getName()).log(Level.SEVERE, null, ex);
            gui.showMessage("Błąd połączenia", JOptionPane.ERROR_MESSAGE, ex.getLocalizedMessage());
            setEnabled(true);
        } catch (IOException ex) {
            Logger.getLogger(LoginPanel.class.getName()).log(Level.SEVERE, null, ex);
            gui.showMessage("Błąd połączenia", JOptionPane.ERROR_MESSAGE, ex.getLocalizedMessage());

            setEnabled(true);
        }
    }//GEN-LAST:event_loginButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JButton loginButton;
    private javax.swing.JTextField loginField;
    private javax.swing.JLabel loginLabel;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JLabel portLabel;
    private javax.swing.JSpinner portSpinner;
    private javax.swing.JCheckBox savePasswordCheck;
    private javax.swing.JTextField serverField;
    private javax.swing.JLabel serverLabel;
    // End of variables declaration//GEN-END:variables

    public void setGui(IGUIState gui) {
        this.gui = gui;
    }

    public IGUIState getGui() {
        return gui;
    }

    @Override
    protected void finalize() throws Throwable {
        super.finalize();
        savePrefs();
    }

}
