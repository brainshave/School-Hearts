* Za co grozi śmierć?
  - Za dodanie prywatnych ustawień projektu (katalog *private* wew.
    katalogu projektu)
  - za złorzeczenie Królowej.

* Technicznie
  - Używamy *NetBeansa 6.7.1*, bo 6.8 nie wprowadza istotnych zmian
    a przecież kochamy plugin do UML-a ;)
  - Ewentualnie można pisać w dowolnym edytorze i kompilować antem.
  - Gita, na Windowsie [[http://code.google.com/p/msysgit/][msysgita]].
  - Do zabawy z kluczami na Windowsie polecam putty (pageant)
  - Olewamy zoho, github ma coś takiego jak [[http://github.com/santamon/School-Hearts/issues][issues]] i spróbujemy działać
    na tym.

* Strategia
  Póki co taki pomysł:
  - każdy pracuje w swoim forku, wrzuca do mojego mastera tylko sprawne
    i *przetestowane* komponenty, może najlepiej z plikiem *jar*?
    (może "oficjalne" jary pójdą do katalogu Lib ?)
  - master nie służy też do pisania czegoś w dwie osoby i synchronizacji
    na bieżąco.
    Do tego git jest systemem rozproszonym, żeby takie akcje robić poza
    masterem :P
  - problemy z mergowaniem z masterem zostawcie Szymonowi ;)

* Projekty Hearts ___
** Server
   Mega serwer w Javie

   | Opiekun: | +     | Zależy od:   | Wymagane przez: |
   |----------+-------+--------------+-----------------|
   | Michał   | Paweł | Definitions, | brak            |
   |          |       | Judge,       |                 |
   |          |       | Protocol,    |                 |
   |          |       | Storage,     |                 |
   |          |       | State        |                 |

** Client  
   Piękny klient w Swingu.

   | Opiekun: | + | Zależy od:   | Wymagane przez: |
   |----------+---+--------------+-----------------|
   | Szymon   |   | Definitions, | brak            |
   |          |   | Protocol,    |                 |
   |          |   | State        |                 |

** Definitions
   Definicje wszystkich interfejsów gry, centralne miejsce na projektowanie
   i dokumentację. Dokumentujemy tutaj teoretyczne działanie klas i metod,
   szczegóły dot. implementacji powinny być udokumentowane tam.

   Interfejsy można dodawać po zaimplementowaniu ale może to być
   trudniejsze w realizacji (rozdzielenie co się nadaje do interfejsu
   a co jest czysto implementacyjne).
   
   | Opiekun: | +       | Zależy od: | Wymagane przez: |
   |----------+---------+------------+-----------------|
   | Szymon   | wszyscy | brak       | wszystko        |


** State
   Format zapisu stanu gry.

   | Opiekun: | + | Zależy od:  | Wymagane przez: |
   |----------+---+-------------+-----------------|
   | Szymon   |   | Definitions | Server          |
   |          |   |             | Client          |
   |          |   |             | Judge           |
   |          |   |             | Storage         |

** Protocol
   Implementacja protokołu zarówno dla klienta jak i serwera.

   | Opiekun: | + | Zależy od:   | Wymagane przez: |
   |----------+---+--------------+-----------------|
   | Michał   |   | Definitions, | Server,         |
   |          |   | State        | Client          |


** Judge
   Implementacja zasad gry, na wejściu otrzymujemy State, na wyjściu
   nowy State.

   | Opiekun: | + | Zależy od:   | Wymagane przez: |
   |----------+---+--------------+-----------------|
   | Łukasz   |   | Definitions, | Server          |
   |          |   | State        |                 |

** Storage
   - serializowanie i zapis stanu gry.
   - przywracanie

   | Opiekun: | + | Zależy od:   | Wymagane przez: |
   |----------+---+--------------+-----------------|
   | Paweł    |   | Definitions, | Server          |
   |          |   | State        |                 |


* Ten plik
  Został stworzony w org-mode w Emacsie, ale składnia jest tak oczywista, 
  że możecie to edytować sami, niech będzie powiedzmy tablicą ogłoszeń.
  Utrzymujcie jakąś stałą szerokość wiersza.
  
  Poszczególne punkty można naturalnie komentować tylko z podpisami,
  a do bardziej wylewnych form służy wiki.
